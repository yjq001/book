name: Docker Build and Push

# 触发条件：推送到main分支、打标签或手动触发
on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      ref:
        description: 'Branch, tag or commit SHA to checkout'
        required: true
        default: 'main'
      version:
        description: 'Version tag for the Docker image'
        required: false
        default: 'latest'

env:
  REGISTRY: ghcr.io
  SOURCE_REPO: yjq001/money-backend  # 源代码仓库
  IMAGE_NAME: money-backend  # 固定镜像名称为money-backend
  IMAGE_OWNER: yjq001  # 固定镜像所有者为yjq001

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # 第1步：从指定仓库检出代码到当前工作目录
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.SOURCE_REPO }}  # 从指定仓库检出
          ref: ${{ github.event.inputs.ref || 'main' }}  # 使用指定分支或默认main
          token: ${{ secrets.PAT_TOKEN }}  # 使用PAT令牌认证
          fetch-depth: 1  # 浅克隆，只获取最新的提交

      # 第2步：验证检出的代码是否正确
      - name: Verify checkout
        run: |
          echo "======= SOURCE CODE VERIFICATION ======="
          echo "Checking out from: ${{ env.SOURCE_REPO }}"
          echo "Branch/ref: ${{ github.event.inputs.ref || 'main' }}"
          echo "Working directory: $(pwd)"
          echo "Repository contents:"
          ls -la
          echo "Git info:"
          git remote -v
          git branch
          git log -1 --oneline
          echo "Dockerfile existence check:"
          if [ -f "Dockerfile" ]; then
            echo "Dockerfile exists"
            echo "Dockerfile content:"
            cat Dockerfile
          else
            echo "ERROR: Dockerfile not found!"
            exit 1
          fi

      # 第3步：设置Docker Buildx
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host
          buildkitd-flags: --debug

      # 显示Buildx信息
      - name: Inspect builder
        run: |
          docker buildx inspect
          docker buildx ls

      # 清理空间
      - name: Free Disk Space
        run: |
          echo "Available disk space before cleanup:"
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          echo "Available disk space after cleanup:"
          df -h

      # 第4步：登录到Container Registry
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 第5步：生成Docker镜像元数据
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ github.event.inputs.version || 'latest' }},enable=${{ github.event_name == 'workflow_dispatch' }}
            type=ref,event=branch,enable=${{ github.event_name != 'workflow_dispatch' }}
            type=ref,event=pr,enable=${{ github.event_name != 'workflow_dispatch' }}
            type=semver,pattern={{version}},enable=${{ github.event_name != 'workflow_dispatch' }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ github.event_name != 'workflow_dispatch' }}
            type=sha,format=long,enable=${{ github.event_name != 'workflow_dispatch' }}

      # 第6步：构建和推送Docker镜像 (带重试)
      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .  # 使用当前工作目录（即检出的代码所在目录）
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          provenance: false
          outputs: type=registry,name=${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.IMAGE_NAME }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
        timeout-minutes: 15
        
      # 如果第一次构建失败，尝试再次构建，但不使用缓存
      - name: Build and push Docker image (retry without cache)
        if: failure() && steps.docker_build.outcome == 'failure'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          no-cache: true
          platforms: linux/amd64
          provenance: false
          outputs: type=registry,name=${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.IMAGE_NAME }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
        timeout-minutes: 15

      # 显示构建结果
      - name: Image digest
        if: success()
        run: echo "Image digest: ${{ steps.docker_build.outputs.digest }}" 
