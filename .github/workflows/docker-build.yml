name: Docker Build and Push

# 触发条件：推送到main分支、打标签或手动触发
on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      ref:
        description: '要检出的分支、标签或提交SHA'
        required: true
        default: 'main'
        type: string
      version:
        description: 'Docker镜像版本标签'
        required: false
        default: 'latest'
        type: string

env:
  REGISTRY: ghcr.io
  SOURCE_REPO: yjq001/money-backend
  IMAGE_NAME: money-backend
  IMAGE_OWNER: yjq001

jobs:
  build-and-push:
    # 使用Ubuntu 20.04而不是最新版，可能有更好的Docker兼容性
    runs-on: ubuntu-20.04
    permissions:
      contents: read
      packages: write

    steps:
      # 第1步：从指定仓库检出代码
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.SOURCE_REPO }}
          ref: ${{ inputs.ref || 'main' }}
          token: ${{ secrets.PAT_TOKEN }}
          fetch-depth: 1
      
      # 检查和验证文件
      - name: Verify files
        run: |
          echo "检查工作目录..."
          ls -la
          
          echo "检查 Dockerfile..."
          if [ -f "Dockerfile" ]; then
            echo "✓ Dockerfile 存在"
            cat Dockerfile
          else
            echo "✗ Dockerfile 不存在!"
            exit 1
          fi
          
          echo "检查 .dockerignore..."
          if [ -f ".dockerignore" ]; then
            echo "✓ .dockerignore 存在"
            cat .dockerignore
          else
            echo "✗ .dockerignore 不存在，创建一个空文件"
            touch .dockerignore
          fi
      
      # 设置QEMU，支持多架构构建
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: 'arm64,amd64'
      
      # 设置Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      # 显示Docker信息
      - name: Docker info
        run: |
          docker version
          docker info
          docker buildx ls

      # 登录到GHCR
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 设置标签名称
      - name: Set up Docker tags
        id: docker_tags
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG="${{ inputs.version || 'latest' }}"
          elif [ "${{ github.ref_type }}" = "tag" ]; then
            TAG="${{ github.ref_name }}"
          else
            TAG="${{ github.ref_name || 'latest' }}"
          fi
          echo "使用标签: $TAG"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          FULL_IMAGE_NAME="${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.IMAGE_NAME }}:$TAG"
          echo "image=$FULL_IMAGE_NAME" >> $GITHUB_OUTPUT

      # 使用Docker Buildx构建多架构镜像并推送
      - name: Build and push multi-architecture Docker image
        run: |
          echo "开始构建多架构镜像: ${{ steps.docker_tags.outputs.image }}"
          
          # 使用buildx构建多架构镜像
          if [ "${{ github.event_name }}" != "pull_request" ]; then
            # 构建并推送
            docker buildx build --platform linux/amd64,linux/arm64 \
              --push \
              --tag ${{ steps.docker_tags.outputs.image }} \
              .
            echo "已推送多架构镜像到 ${{ env.REGISTRY }}"
          else
            # 仅构建，不推送
            docker buildx build --platform linux/amd64,linux/arm64 \
              --tag ${{ steps.docker_tags.outputs.image }} \
              --load \
              .
            echo "拉取请求，跳过推送"
          fi
          
          # 显示镜像信息
          docker buildx imagetools inspect ${{ steps.docker_tags.outputs.image }}

      # 显示构建结果
      - name: Image info
        if: success()
        run: |
          echo "多架构构建成功!"
          echo "镜像: ${{ steps.docker_tags.outputs.image }}"
          echo "支持的架构: linux/amd64, linux/arm64" 
